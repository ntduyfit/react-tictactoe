{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","helpers/CalculatePosition.js","helpers/CalculateWinner.js","App.js","index.js"],"names":["Square","props","value","onClick","classes","isWin","className","Board","squares","winner","Row","firstElem","lastElem","rawSquares","slice","map","square","index","exactIndex","line","includes","Rows","rows","i","length","push","History","moves","history","steps","isAscending","jumpTo","step","move","stepList","position","row","col","current","reverse","displayMove","max","Fragment","calculatePosition","Math","floor","CalculateWinner","lines","a","b","c","symbol","initHistory","Array","fill","initStepNumber","Game","useState","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","setIsAscending","isDraw","CalculatePosition","currentHistory","newStepNumber","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d0a8411.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Square = (props) => {\n\tconst { value, onClick, isWin } = props;\n\tconst classes = 'square' + (isWin ? ' winner' : '');\n\treturn (\n\t\t<button className={classes} onClick={() => onClick()}>\n\t\t\t{value}\n\t\t</button>\n\t);\n};\n\nSquare.propTypes = {\n\tonClick: propTypes.func,\n\tvalue: propTypes.string,\n\tisWin: propTypes.bool\n};\n\nexport default Square;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport Square from './Square';\n\nconst Board = (props) => {\n\tconst { squares, onClick, winner } = props;\n\n\tconst Row = ({ firstElem }) => {\n\t\tconst lastElem = firstElem + 3;\n\t\tconst rawSquares = squares.slice(firstElem, lastElem);\n\t\treturn (\n\t\t\t<div className='board-row'>\n\t\t\t\t{rawSquares.map((square, index) => {\n\t\t\t\t\tconst exactIndex = index + firstElem;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Square\n\t\t\t\t\t\t\tkey={'key' + exactIndex}\n\t\t\t\t\t\t\tvalue={square}\n\t\t\t\t\t\t\tonClick={() => onClick(exactIndex)}\n\t\t\t\t\t\t\tisWin={winner && winner.line.includes(exactIndex)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tRow.propTypes = {\n\t\tfirstElem: propTypes.number\n\t};\n\n\tconst Rows = () => {\n\t\tconst rows = [];\n\t\tfor (let i = 0; i < squares.length; i += 3) {\n\t\t\trows.push(<Row key={'row' + i} firstElem={i} />);\n\t\t}\n\t\treturn rows;\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Rows />\n\t\t</div>\n\t);\n};\n\nBoard.propTypes = {\n\tsquares: propTypes.array,\n\tonClick: propTypes.func,\n\twinner: propTypes.array\n};\n\nexport default Board;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst History = (props) => {\n\tconst { history, steps, isAscending, jumpTo } = props;\n\n\tlet moves;\n\tif (isAscending) {\n\t\tmoves = history.map((step, move) => {\n\t\t\tconst stepList = move\n\t\t\t\t? 'Go to move #' + move + ` (${step.position.row}, ${step.position.col})`\n\t\t\t\t: 'Go to game start';\n\t\t\treturn (\n\t\t\t\t<li key={'move' + move} className={move === steps.current && 'bold'}>\n\t\t\t\t\t<button onClick={() => jumpTo(move)}>{stepList}</button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t} else {\n\t\tconst revertHistory = history.slice().reverse();\n\t\tmoves = revertHistory.map((step, move) => {\n\t\t\tconst displayMove = steps.max - move;\n\t\t\tconst stepList =\n\t\t\t\tstep.position.col !== -1\n\t\t\t\t\t? 'Go to move #' + displayMove + ` (${step.position.row}, ${step.position.col})`\n\t\t\t\t\t: 'Go to game start';\n\t\t\treturn (\n\t\t\t\t<li key={'move' + displayMove} className={displayMove === steps.current && 'bold'}>\n\t\t\t\t\t<button onClick={() => jumpTo(displayMove)}>{stepList}</button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t}\n\treturn <React.Fragment>{moves}</React.Fragment>;\n};\n\nHistory.propTypes = {\n\thistory: PropTypes.array,\n\tsteps: PropTypes.object,\n\tisAscending: PropTypes.bool,\n\tjumpTo: PropTypes.func\n};\n\nexport default History;\n","const calculatePosition = (index) => {\n\tconst row = Math.floor(index / 3 + 1);\n\tconst col = (index % 3) + 1;\n\treturn { row, col };\n};\n\nexport default calculatePosition;\n","const CalculateWinner = (squares) => {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6]\n\t];\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i];\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\t\treturn { symbol: squares[a], line: lines[i] };\n\t\t}\n\t}\n\treturn null;\n};\n\nexport default CalculateWinner;\n","import React, { useState } from 'react';\n\nimport Board from './components/Board';\nimport History from './components/History';\nimport CalculatePosition from './helpers/CalculatePosition';\nimport CalculateWinner from './helpers/CalculateWinner';\n\nimport './App.css';\n\nexport const CELLS_NUM = 9;\n\nconst initHistory = [\n\t{\n\t\tsquares: Array(CELLS_NUM).fill(null),\n\t\tposition: {\n\t\t\trow: -1,\n\t\t\tcol: -1\n\t\t}\n\t}\n];\n\nconst initStepNumber = {\n\tmax: 0,\n\tcurrent: 0\n};\n\nconst Game = () => {\n\tconst [history, setHistory] = useState(initHistory);\n\tconst [stepNumber, setStepNumber] = useState(initStepNumber);\n\tconst [xIsNext, setXIsNext] = useState(true);\n\tconst [isAscending, setIsAscending] = useState(true);\n\n\tconst jumpTo = (step) => {\n\t\tsetStepNumber((prev) => ({\n\t\t\t...prev,\n\t\t\tcurrent: step\n\t\t}));\n\t\tconst check = step % 2 === 0;\n\t\tsetXIsNext(check);\n\t};\n\n\tconst handleClick = (i) => {\n\t\tconst current = history[stepNumber.current];\n\t\tconst squares = current.squares.slice();\n\t\tif (CalculateWinner(squares) || squares[i]) {\n\t\t\treturn;\n\t\t}\n\t\tsquares[i] = xIsNext ? 'X' : 'O';\n\t\tconst position = CalculatePosition(i);\n\n\t\tconst currentHistory = history.slice(0, stepNumber.current + 1);\n\n\t\tsetHistory(() => [\n\t\t\t...currentHistory,\n\t\t\t{\n\t\t\t\tposition,\n\t\t\t\tsquares\n\t\t\t}\n\t\t]);\n\n\t\tconst newStepNumber = currentHistory.length;\n\t\tsetStepNumber({\n\t\t\tcurrent: newStepNumber,\n\t\t\tmax: newStepNumber\n\t\t});\n\t\tconst checkNext = !xIsNext;\n\t\tsetXIsNext(checkNext);\n\t};\n\n\tconst handleSortChange = () => {\n\t\tconst toggle = !isAscending;\n\t\tsetIsAscending(toggle);\n\t};\n\n\tconst current = history[stepNumber.current];\n\tconst winner = CalculateWinner(current.squares);\n\n\tconst isDraw = stepNumber.current === 9 && !winner;\n\n\treturn (\n\t\t<div className='game'>\n\t\t\t<div className='game-board'>\n\t\t\t\t<Board squares={current.squares} onClick={handleClick} winner={winner} />\n\t\t\t</div>\n\t\t\t<div className='game-info'>\n\t\t\t\t<button onClick={handleSortChange}>Sort steps order</button>\n\t\t\t\t{isDraw ? (\n\t\t\t\t\t<div>Draw</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div>{winner ? 'Winner: ' + winner.symbol : 'Next player: ' + (xIsNext ? 'X' : 'O')}</div>\n\t\t\t\t)}\n\t\t\t\t<ol>\n\t\t\t\t\t<History steps={stepNumber} history={history} jumpTo={jumpTo} isAscending={isAscending} />\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}